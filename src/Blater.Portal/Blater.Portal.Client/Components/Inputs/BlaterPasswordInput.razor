<MudTextField
    T="string"
    InputType="@_passwordInput"
    AdornmentIcon="@_passwordInputIcon"
    OnAdornmentClick="ShowPassword"
    Value="@Value"
    ValueChanged="@OnValueChanged"
    Adornment="Adornment.End"
    Variant="Variant.Filled"
    Required="true"
    RequiredError="@($"{Label ?? "Password"} is required")"
    Label="@(Label ?? "Password")"/>

@code {
    
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    [EditorRequired]
    public string Value { get; set; } = null!;
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Material.Filled.VisibilityOff;
    
    void ShowPassword()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    async Task OnValueChanged(string value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(Value);
    }
}