<MudCard Elevation="1" Class="d-flex align-center justify-center rounded-xl">
    <MudBreakpointProvider>
        <MudGrid Justify="Justify.Center" Spacing="0" Class="mud-width-full mud-height-full pa-4">
            <MudItem xs="12">
                <BlaterLogo/>
            </MudItem>
            <MudItem xs="12" Class="d-flex flex-column gap-1">
                <MudText Typo="@Typo.h4" Color="Color.Primary" Class="mb-6 mt-4">
                    @(IsLogin ? "Login" : "Create your account")
                </MudText>
            </MudItem>
            <MudItem xs="12" Class="d-flex flex-row align-start gap-2">
                <MudButton
                    StartIcon="@Icons.Custom.Brands.GitHub"
                    IconClass="px-2"
                    Class="d-flex justify-start align-center mud-width-full"
                    Size="Size.Medium"
                    Variant="Variant.Outlined">
                    Continue with GitHub
                </MudButton>
                <MudButton
                    StartIcon="@Icons.Custom.Brands.Google"
                    IconClass="px-2"
                    Class="d-flex justify-start align-center mud-width-full"
                    Size="Size.Medium"
                    Variant="Variant.Outlined">
                    Continue with Google
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center" Style="height: 50px;">
                <MudDivider Style="width: 30%"/>
                <MudText Typo="@Typo.subtitle1" Class="pa-4"> or </MudText>
                <MudDivider Style="width: 30%"/>
            </MudItem>
            @if (!IsLogin)
            {
                <MudItem xs="12">
                    <MudTextField 
                        Variant="Variant.Filled" 
                        T="string" Required="true" RequiredError="Name is required" Label="Name" @bind-Value="@Name"/>
                </MudItem>
            }
            <MudItem xs="12">
                <MudTextField 
                    Variant="Variant.Filled" 
                    T="string" Required="true" RequiredError="Email is required" Label="Email" @bind-Value="@Email"/>
            </MudItem>
            <MudItem xs="12">
                <BlaterPasswordInput ValueChanged="@(s => Password = s)"/>
            </MudItem>
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <MudItem xs="12" Class="d-flex align-center">
                    <MudText Typo="@Typo.subtitle1" Class="mt-6">
                        @ErrorMessage
                    </MudText>
                </MudItem>
            }
            <MudItem xs="12">
                <MudButton 
                    Class="mt-4 mud-width-full" 
                    OnClick="@(() => Callback.InvokeAsync((Email, Name, Password)!))" 
                    ButtonType="ButtonType.Submit" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary">
                    Continue
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center">
                <MudText Typo="@Typo.subtitle1" Class="mt-6">
                    @if (IsLogin)
                    {
                        @("No account?")
                        <MudLink Href="/sign-up">Sign up</MudLink>
                    }
                    else
                    {
                        @("Have an account?")
                        <MudLink Href="/login">Sign in</MudLink>
                    }
                </MudText>
            </MudItem>
        </MudGrid>
    </MudBreakpointProvider>
</MudCard>

@code {
    [Inject]
    protected IBrowserViewportService  BrowserViewportService { get; set; } = null!;

    [Parameter]
    public bool IsLogin { get; set; }
    
    [Parameter]
    public EventCallback<(string Email, string Name, string Password)> Callback { get; set; }
    
    [Parameter]
    public string? ErrorMessage { get; set; }
    
    private string Email { get; set; } = null!;
    private string Password { get; set; } = null!;
    private string Name { get; set; } = null!;
}