@page "/home"
@using Blater.Extensions
@using Blater.Frontend.Client.Extensions
@using Blater.Models.User

@layout BlaterPortalLayout

<BlaterAuthorizeView @ref="@_blaterAuthorizeView" Roles="@_roles" Permissions="@_permissions">
    <Authorized>
        <h1>You are authenticated using BlaterAuthorizedView</h1>
        <br/>
        <p>=== Default ===</p>
        <p>UserId -> @context.User.Claims.FirstOrDefault(x => x.Type == "UserId")?.Value!</p>
        <p>Role -> @context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value!</p>
        <p>AuthenticationType -> @context.User.Identity?.AuthenticationType!</p>
        <p>IsAuthenticated -> @context.User.Identity?.IsAuthenticated!</p>
        <p>BlaterUserToken -> @context.User.GetUserAuthenticated().ToJson()</p>
        <br/>
        <p>=== Features ===</p>
        <p>GetUserAuthenticated -> @_blaterAuthorizeView?.GetUserAuthenticated().ToJson()</p>
    </Authorized>
    <NotAuthorized>
        <h1>You are not authenticated using BlaterAuthorizedView</h1>
    </NotAuthorized>
</BlaterAuthorizeView>

@code{

    readonly List<string> _roles = ["ProjectOwner"];
    readonly List<string> _permissions = ["ProjectOwner:Create"];

    BlaterAuthorizeView? _blaterAuthorizeView;
    
    [Inject]
    private ISnackbar Snackbar { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userAuthenticated = _blaterAuthorizeView?.GetUserAuthenticated();
            
            if (userAuthenticated is null)
            {
                Snackbar.Add("User not authenticated", Severity.Error);
                return;
            }

            await Task.Delay(1);

            /*var result = await UserStore.FindOne(x => x.Email == userAuthenticated.Email);

            if (result.HandleErrors(out var errors, out var response))
            {
                errors.ForEach(x => Snackbar.Add(x.Message, Severity.Error));
                return;
            }

            Snackbar.Add(response.ToJson(), Severity.Success);*/
        }
    }

}